# Parses migration issue and creates a comment with next step
#
# Required variables:
#
#   - TARGET_ORGANIZATION:
#     The organization on GitHub.com to import into (needs to have ECI feature flag enabled)

name: Process Migration Issue

on:
  issues:
    types: [opened, edited]

jobs:
  prepare:
    name: Prepare Repos Migration
    runs-on: Migration-fixed-ip-Ubuntu-4-core-runner
    container:
      image: ghcr.io/actions/actions-runner:latest
      options: --user root

    if: github.event_name == 'issues' &&
      (github.event.action == 'opened' || github.event.action == 'edited') &&
      (contains(github.event.issue.labels.*.name, 'migration') ||  contains(github.event.issue.labels.*.name, 'big-migration')) &&
      !contains(github.event.issue.labels.*.name, 'gei-org')

    steps:
      - name: Check out scripts
        uses: actions/checkout@v4

      - name: Parse issue body
        id: parse-issue-body
        uses: Legal-General-Group-Digital/github-issue-parser-action@v3

      - run: echo "${JSON_STRING}"
        env:
          JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}

      - run: echo "${REPO_STRING}"
        env:
          REPO_STRING: ${{ steps.parse-issue-body.outputs.issueparser_repositories }}

      - name: Post prepare message
        uses: actions/github-script@v6
        with:
          script: |
            // if process.env.VISIBILITY is 'None', set it to 'private'
            let visibility
            if (process.env.VISIBILITY == 'None') {
              visibility = 'Private'
            } else {
              visibility = process.env.VISIBILITY
            }
            let commentBody
            let repositories = process.env.REPOSITORIES.trim().split('\n').map(line => line.split(' ')[0]);
            let target_organization = process.env.REPOSITORIES.trim().split('\n').map(line => line.split(' ')[1].trim());

            // Extract repository names from URLs
            let repo_names = repositories.map(repo => repo.split('/').pop().replace(/\r$/, ''));

            // Create an array of repository and target organization pairs
            let repo_org_pairs = repo_names.map((repo, index) => `Repository ${repo} will be migrated to the ${target_organization[index]} target organization`);

            commentBody = `ðŸ‘‹ Thank you for opening this migration issue.
            
            The following **${repositories.length} repositories** have been parsed from your issue body:

            \`\`\`
            ${repositories.join('\n')}
            \`\`\`

            The  following **target organization** have been parsed form your issue body:
            
            \`\`\`
            ${target_organization.join('\n')}
            \`\`\`

            The **target repository visibility** is set to be: **\`${ visibility }\`**

            The following repositories are scheduled for migration to their respective target organizations

              \`\`\`
              ${repo_org_pairs.join('\n')}
              \`\`\`

            <details>
              <summary><b>Troubleshooting</b></summary>

            If the parsed repositories are not matching the repositories listed in your issue body, you can edit the issue body and make sure it's correct. List your repositories in a code block as this one:

            \`\`\`
            https://source.example.com/your-org/your-repository-1
            https://source.example.com/your-org/your-repository-2
            \`\`\`
            </details>

            ## Run the migration

            Add a comment to this issue with one of the following two commands in order to run a migration:

            **Dry-run**

            We recommend to do a "dry-run" migration first which **will not lock your source repository** and therefore does not block your users from continuing to work on the repository.

            \`\`\`
            /run-dry-run-migration
            \`\`\`

            **Production**

            After you have verified your "dry-run" migration and after you have announced the production migration to your users, create a comment with the following command to start the production migration. It **will lock your source repository** and make it unaccessible for your users.

            \`\`\`
            /run-production-migration
            \`\`\`
            `
            await github.rest.issues.createComment({
                issue_number: ${{ github.event.issue.number }},
                owner: '${{ github.REPOSITORY_OWNER }}',
                repo: '${{ github.event.repository.name }}',
                body: commentBody
            })
        env:
          REPOSITORIES: ${{ steps.parse-issue-body.outputs.issueparser_repositories }}
          VISIBILITY: ${{ steps.parse-issue-body.outputs.issueparser_target_repository_visibility }}

      - name: Post failure message
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          script: |
            let commentBody
            commentBody = `ðŸ˜¢ The issue body could not be parsed. Please edit the issue body or open a new issue using an issue template.`
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: '${{ github.REPOSITORY_OWNER }}',
              repo: '${{ github.event.repository.name }}',
              body: commentBody
            })
