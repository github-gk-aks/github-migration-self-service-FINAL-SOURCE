name: Migration (Delete repositories) [GEI]

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

# jobs:
#   delete-repositories:
#     name: Delete repositories
#     runs-on: Migration-fixed-ip-Ubuntu-4-core-runner
#     container: 
#       image: ghcr.io/actions/actions-runner:latest
#       options: --user root

#     if: github.event_name == 'issue_comment' &&
#       contains(github.event.issue.labels.*.name, 'gei') &&
#       startsWith(github.event.comment.body, '/delete-repositories')

#     steps:
#       - name: Check out repository
#         uses: actions/checkout@v4

#       - name: Parse issue body
#         id: parse-issue-body
#         uses: Legal-General-Group-Digital/github-issue-parser-action@v3

#       - run: echo $JSON_STRING
#         env:
#           JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}

#       - name: Delete repositories
#         id: delete-repos
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ secrets.TARGET_ADMIN_TOKEN }}
#           script: |
#             const repositories = process.env.REPOSITORIES.split('\n');
#             const labels = process.env.LABELS;
#             let isfailed = false;

#             await Promise.all(repositories.map(async (sourceRepo) => {
#               if (sourceRepo) {
#                 let [repoUrl, targetOrg] = sourceRepo.split(' ');
#                 targetOrg = targetOrg.trim();
#                 // if BitBucket, need to properly format the repo name
#                 const hasGEIBitbucketLabel = labels.includes('gei-bitbucket');
#                 let repoName;
#                 if (hasGEIBitbucketLabel) {
#                   let repoParts = sourceRepo.split(',').map(part => part.trim());
#                   repoName = repoParts.join('-');
#                 } else { // Azure DevOps or GitHub
#                   repoName = repoUrl.split('/').pop().replace(/\r$/, '');
#                 }

#                 core.info(`Deleting ${targetOrg}/${repoName}`);
#                 try {
#                   await github.rest.repos.delete({
#                     owner: targetOrg,
#                     repo: repoName,
#                   });
#                 } catch (error) {
#                   core.error(`Failed to delete ${targetOrg}/${repoName}: ${error.message}`);
#                   isfailed = true;
#                 }
#               }
#             }));
#             if (isfailed) {
#               core.setFailed('Failed to delete one or more repositories');
#             }
#         env:
#           REPOSITORIES: ${{ steps.parse-issue-body.outputs.issueparser_repositories }}
#           LABELS: ${{ toJSON(github.event.issue.labels.*.name) }}

#       - name: Update issue with failed deletion
#         if: always() && steps.delete-repos.outcome == 'failure'
#         uses: actions/github-script@v7
#         with:
#           script: |
#             const body = `Failed to delete **Dry-run** migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`
#             await github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body
#             })

#       - name: Update issue with running state
#         uses: actions/github-script@v7
#         with:
#           script: |
#             const body = `:wastebasket: Deleted **Dry-run** migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\nTo run the production migration enter the following command:\n\`\`\`\n/run-production-migration\n\`\`\``
#             await github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body
#             })
